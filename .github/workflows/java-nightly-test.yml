name: Upload Java Nightly builds

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: Job prefix to use.
        required: false
        default: ''
      dependency_to_install:
        description: In case need to upload custom artifact to nightly repository (i.e memory / flight / others).
        required: false
        default: 'arrow'

jobs:
  upload:
    env:
      PREFIX: ${{ github.event.inputs.prefix || ''}}
      DEPENDENCY_TO_INSTALL: ${{ github.event.inputs.dependency_to_install || ''}}
    runs-on: ubuntu-latest
    steps:
#       - name: Checkout Arrow
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 1
#           path: arrow
#           repository: apache/arrow
#           ref: master
#           submodules: recursive
#       - name: Checkout Crossbow
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           path: crossbow
#           repository: ursacomputing/crossbow
#           ref: master 
#       - name: Set up Python
#         uses: actions/setup-python@v3
#         with:
#           cache: 'pip'
#           python-version: 3.8
#       - name: Install Archery
#         shell: bash
#         run: pip install -e arrow/dev/archery[all]
#       - run: mkdir -p arrow_java_$(date +"%d-%m-%Y")
#       - name: Download Artifacts
#         run: |
#           if [ -z $PREFIX ]; then
#             PREFIX=nightly-packaging-$(date +%Y-%m-%d)-0
#           fi
#           echo $PREFIX
#           archery crossbow download-artifacts -f java-jars -t arrow_java_$(date +"%d-%m-%Y") $PREFIX
#           tree arrow_java_$(date +"%d-%m-%Y")
      - shell: bash
        run: |
          if [ -z $PREFIX ]; then
            PREFIX=nightly-packaging-$(date +%Y-%m-%d)-0
          fi
          if [ -z $DEPENDENCY_TO_INSTALL ]; then
            DEPENDENCY_TO_INSTALL=arrow
          fi
          echo $PREFIX
          ARROW_JAVA_NIGHTLY_VERSION=$PREFIX'-github-java-jars'
          TMP_FOLDER=arrow_java_$(date +%Y-%m-%d)
          PATTERN_TO_GET_LIB_AND_VERSION='([a-z].+)-([0-9].[0-9].[0-9].dev[0-9]+).([a-z]+)'
          mkdir -p $TMP_FOLDER
          pushd $TMP_FOLDER
          # this download artifacts should be execute thru crossbow (workaround to solve problem about rate limit using github3 without API_TOKEN)
          echo "**************** 1 - Download $ARROW_JAVA_NIGHTLY_VERSION dependencies ****************"
          wget $( \
          	wget \
          		"-qO-" "https://api.github.com/repos/ursacomputing/crossbow/releases/tags/$ARROW_JAVA_NIGHTLY_VERSION" \
          		| jq -r '.assets[] | select((.name | endswith(".pom")) or (.name | endswith(".jar"))) | .browser_download_url' \
          		| grep $DEPENDENCY_TO_INSTALL )
          echo "Downloaded: $(ls | wc -l) files"
          echo "**************** 2 - Install arrow java libraries to local repository ****************"
          for LIBRARY in $(ls | grep -E '.jar|.pom' | grep dev); do
            [[ $LIBRARY =~ $PATTERN_TO_GET_LIB_AND_VERSION ]]
            FILE=$PWD/${BASH_REMATCH[0]}
            PACKAGING="jar"
            if [[ ( ${BASH_REMATCH[0]} == *"$DEPENDENCY_TO_INSTALL"* ) ]];then
              if [ -f "$FILE" ]; then
                FILE=$FILE
              if [[ "$FILE" =~ .*"pom" ]]; then
                PACKAGING="pom"
              fi
              else
                if [ -f "$FILE.jar" ]; then # Out of regex: -javadoc.jar / -sources.jar
                  FILE=$FILE.jar
                else
                  if [ -f "$FILE-with-dependencies.jar" ]; then # Out of regex: -with-dependencies.jar
                    FILE=$FILE-with-dependencies.jar
                  else 
                    if [ -f "$FILE-format-flatbuffers.jar" ]; then # Out of regex: -shade-format-flatbuffers.jar
                      FILE=$FILE-format-flatbuffers.jar
                      else
                        echo "Please! Review $FILE, it was not intalled on m2 locally."
                      fi
                  fi
                fi
              fi
              echo "$FILE"
              echo "$PACKAGING"
              # mvn install:install-file \
              # 	-Dfile="$FILE" \
              # 	-DgroupId=org.apache.arrow \
              # 	-DartifactId=${BASH_REMATCH[1]} \
              # 	-Dversion=${BASH_REMATCH[2]} \
              # 	-Dpackaging=$PACKAGING \
            fi
          done
          popd
          # rm -rf $TMP_FOLDER
          echo "Go to your project and execute: mvn clean install"
          
