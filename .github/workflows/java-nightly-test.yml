name: Upload Java Nightly builds

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: Job prefix to use.
        required: false
        default: ''
      dependency_to_install:
        description: In case need to upload custom artifact to nightly repository (i.e memory / flight / others).
        required: false
        default: 'arrow'

jobs:
  upload:
    env:
      PREFIX: ${{ github.event.inputs.prefix || ''}}
      DEPENDENCY_TO_INSTALL: ${{ github.event.inputs.dependency_to_install || ''}}
    runs-on: ubuntu-latest
    steps:
#       - name: Checkout Arrow
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 1
#           path: arrow
#           repository: apache/arrow
#           ref: master
#           submodules: recursive
#       - name: Checkout Crossbow
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           path: crossbow
#           repository: ursacomputing/crossbow
#           ref: master 
#       - name: Set up Python
#         uses: actions/setup-python@v3
#         with:
#           cache: 'pip'
#           python-version: 3.8
#       - name: Install Archery
#         shell: bash
#         run: pip install -e arrow/dev/archery[all]
#       - run: mkdir -p arrow_java_$(date +"%d-%m-%Y")
#       - name: Download Artifacts
#         run: |
#           if [ -z $PREFIX ]; then
#             PREFIX=nightly-packaging-$(date +%Y-%m-%d)-0
#           fi
#           echo $PREFIX
#           archery crossbow download-artifacts -f java-jars -t arrow_java_$(date +"%d-%m-%Y") $PREFIX
#           tree arrow_java_$(date +"%d-%m-%Y")
      - shell: bash
        run: |
          if [ -z $PREFIX ]; then
            PREFIX=nightly-packaging-$(date +%Y-%m-%d)-0
          fi
          if [ -z $DEPENDENCY_TO_INSTALL ]; then
            DEPENDENCY_TO_INSTALL=arrow
          fi
          ARROW_JAVA_NIGHTLY_VERSION=$PREFIX'-github-java-jars'
          TMP_FOLDER=arrow_java_$(date +%Y-%m-%d)
          PATTERN_TO_GET_LIB_AND_VERSION='([a-z].+)-([0-9].[0-9].[0-9].dev[0-9]+).([a-z]+)'
          mkdir -p $TMP_FOLDER
          pushd $TMP_FOLDER
          # this download artifacts should be executed thru crossbow (workaround to solve problem about rate limit using github3 without API_TOKEN)
          echo "**************** 1 - Download $ARROW_JAVA_NIGHTLY_VERSION dependencies ****************"
          wget $( \
            wget \
              "-qO-" "https://api.github.com/repos/ursacomputing/crossbow/releases/tags/$ARROW_JAVA_NIGHTLY_VERSION" \
              | jq -r '.assets[] | select((.name | endswith(".pom")) or (.name | endswith(".jar"))) | .browser_download_url' \
              | grep $DEPENDENCY_TO_INSTALL )
          echo "Downloaded: $(ls | wc -l) files"
          
          echo "**************** 2 - Install arrow java libraries to local repository ****************"
          rm -rf ~/.m2/repository/org/apache/arrow
          for LIBRARY in $(ls | grep -E '.jar|.pom' | grep dev); do
            [[ $LIBRARY =~ $PATTERN_TO_GET_LIB_AND_VERSION ]]
            FILE=$PWD/${BASH_REMATCH[0]}
            ARTIFACTID=${BASH_REMATCH[1]}
            VERSION=${BASH_REMATCH[2]}
            PACKAGING="jar"
            CLASSIFIER=""
            GENERATEPOM=false
            if [[ ( ${BASH_REMATCH[0]} == *"$DEPENDENCY_TO_INSTALL"* ) ]];then
              if [ -f "$FILE" ]; then
                FILE=$FILE
                if [[ $FILE =~ ".pom" ]]; then
                  FILE=$FILE
                  PACKAGING="pom"
                  GENERATEPOM=true
                fi
              elif [ -f "$FILE.jar" ]; then
                FILE=$FILE.jar
                if [[ $FILE =~ "sources.jar" ]]; then
                  CLASSIFIER="sources"
                  PACKAGING="java-source"
                elif [[ $FILE =~ "javadoc.jar" ]]; then
                  CLASSIFIER="javadoc"
                  PACKAGING="javadoc"
                elif [[ $FILE =~ "tests.jar" ]]; then
                  CLASSIFIER="tests"
                  PACKAGING="test-jar"
                fi
              elif [ -f "$FILE.pom" ]; then
                FILE=$FILE.pom
                PACKAGING="pom"
                GENERATEPOM=true
              else
                echo "Please! Review $FILE, it was not intalled on m2 locally."
              fi
              mvn install:install-file \
                -Dfile=$FILE \
                -DgroupId=org.apache.arrow \
                -DartifactId=$ARTIFACTID \
                -Dversion=$VERSION \
                -Dpackaging=$PACKAGING \
                -Dclassifier=$CLASSIFIER \
                -DgeneratePom=$GENERATEPOM
            fi
            echo "Artifacts $FILE installed locally to ~/.m2/repository/org/apache/arrow"
          done
          popd

          echo "**************** 3 - Local repository to sync ****************"
          rm -rf repo
          mkdir repo
          cp -r ~/.m2/repository/org/apache/arrow repo
          tree repo
          echo "Repo configured with Arrow Java artifacts ready to sync"



          
