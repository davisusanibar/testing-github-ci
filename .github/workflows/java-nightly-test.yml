name: Upload Java Nightly builds

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: Job prefix to use.
        required: false
        default: ''

jobs:
  upload:
    env:
      PREFIX: ${{ github.event.inputs.prefix || ''}}
    runs-on: ubuntu-latest
    steps:
#       - name: Checkout Arrow
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 1
#           path: arrow
#           repository: apache/arrow
#           ref: master
#           submodules: recursive
#       - name: Checkout Crossbow
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           path: crossbow
#           repository: ursacomputing/crossbow
#           ref: master 
#       - name: Set up Python
#         uses: actions/setup-python@v3
#         with:
#           cache: 'pip'
#           python-version: 3.8
#       - name: Install Archery
#         shell: bash
#         run: pip install -e arrow/dev/archery[all]
      - run: mkdir -p binaries
      - name: Download Artifacts
        run: |
          if [ -z $PREFIX ]; then
            PREFIX=nightly-packaging-$(date +%Y-%m-%d)-0
          fi
          echo $PREFIX
          # archery crossbow download-artifacts -f java-jars -t binaries $PREFIX
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-java-root-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-format-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-format-9.0.0.dev174.jar
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-vector-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-vector-9.0.0.dev174.jar
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-memory-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-memory-core-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-memory-netty-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-memory-core-9.0.0.dev174.jar
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-memory-netty-9.0.0.dev174.jar
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/arrow-flight-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/flight-core-9.0.0.dev174.pom
          wget https://github.com/ursacomputing/crossbow/releases/download/nightly-packaging-2022-06-06-0-github-java-jars/flight-core-9.0.0.dev174.jar
          mv *.pom binaries
          mv *.jar binaries
          tree binaries
          if [ -n "$(ls -A binaries/*/)" ]; then
            echo "Found files!"
            echo "GOT_FILES=true" >> $GITHUB_ENV
          else
            echo "No files found. Stopping upload."
            echo "GOT_FILES=false" >> $GITHUB_ENV
          fi
      - run: mkdir -p binaries
      - shell: bash
        run: |
          # Shell variables
          ARROW_JAVA_NIGHTLY_VERSION=${1:-'nightly-2022-03-03-0-github-java-jars'}
          DEPENDENCY_TO_INSTALL=${2:-'arrow'}

          # Local Variables
          TMP_FOLDER=arrow_java_$(date +"%d-%m-%Y")
          PATTERN_TO_GET_LIB_AND_VERSION='([a-z].+)-([0-9].[0-9].[0-9].dev[0-9]+).([a-z]+)'

          # Aplication logic
          echo $DEPENDENCY_TO_INSTALL
          mkdir -p $TMP_FOLDER
          pushd $TMP_FOLDER
          echo "**************** 1 - Download arrow-java $1 dependencies ****************"
          # wget $( \
          # 	wget \
          # 		-qO- https://api.github.com/repos/ursacomputing/crossbow/releases/tags/$ARROW_JAVA_NIGHTLY_VERSION \
          # 		| jq -r '.assets[] | select((.name | endswith(".pom")) or (.name | endswith(".jar"))) | .browser_download_url' \
          # 		| grep $DEPENDENCY_TO_INSTALL )

          echo "**************** 2 - Install arrow java libraries to local repository ****************"
          for LIBRARY in $(ls | grep -E '.jar|.pom' | grep dev); do
            [[ $LIBRARY =~ $PATTERN_TO_GET_LIB_AND_VERSION ]]
            FILE=$PWD/${BASH_REMATCH[0]}
            PACKAGING="jar"
            if [[ ( ${BASH_REMATCH[0]} == *"$DEPENDENCY_TO_INSTALL"* ) ]];then
              if [ -f "$FILE" ]; then
                FILE=$FILE
              if [[ "$FILE" =~ .*"pom" ]]; then
                PACKAGING="pom"
              fi
              else
                if [ -f "$FILE.jar" ]; then # Out of regex: -javadoc.jar / -sources.jar
                  FILE=$FILE.jar
                else
                  if [ -f "$FILE-with-dependencies.jar" ]; then # Out of regex: -with-dependencies.jar
                    FILE=$FILE-with-dependencies.jar
                  else 
                    if [ -f "$FILE-format-flatbuffers.jar" ]; then # Out of regex: -shade-format-flatbuffers.jar
                      FILE=$FILE-format-flatbuffers.jar
                      else
                        echo "Please! Review $FILE, it was not intalled on m2 locally."
                      fi
                  fi
                fi
              fi
              echo "$FILE"
              echo "$PACKAGING"
              # mvn install:install-file \
              # 	-Dfile="$FILE" \
              # 	-DgroupId=org.apache.arrow \
              # 	-DartifactId=${BASH_REMATCH[1]} \
              # 	-Dversion=${BASH_REMATCH[2]} \
              # 	-Dpackaging=$PACKAGING \
            fi
          done
          popd
          # rm -rf $TMP_FOLDER
          echo "Go to your project and execute: mvn clean install"
          
